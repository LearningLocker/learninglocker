{"version":3,"sources":["export.coffee"],"names":[],"mappings":"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","file":"export.js","sourceRoot":"/source/","sourcesContent":["beagle =\r\n    walk: (callback, params = {}, scope) ->\r\n        scope = scope or window\r\n        (scope.onhashchange = () -> callback(params, scope.location.hash.slice(1)))()\r\n    routes: (() ->\r\n        pathToArray = (path) -> path.split('/')\r\n\r\n        clone = (obj) ->\r\n            Clone = ->\r\n            Clone.prototype = obj\r\n            () -> new Clone()\r\n\r\n        addModifiedParam = (params, route, path, modifiers) ->\r\n            key = route.slice(1)\r\n            modifier = modifiers[key] or (value) -> value\r\n            params[key] = modifier(path, params)\r\n\r\n        isWildcard = (arr = []) -> arr[arr.length - 1] is '*'\r\n\r\n        matchRoute = (route, pathArray, params, modifiers) ->\r\n            match = true\r\n            routeParts = pathToArray(route)\r\n\r\n            routeParts.forEach((routePart, index) ->\r\n                pathPart = pathArray[index]\r\n\r\n                # If the route part is a param then add the path part as a param.\r\n                if routePart[0] is ':' then addModifiedParam(params, routePart, pathPart, modifiers)\r\n\r\n                # If the route part isn't a wildcard or a path then path doesn't match.\r\n                else if not ((routePart is '*') or (routePart is pathPart)) then match = false\r\n            )\r\n\r\n            match = match and (routeParts.length is pathArray.length or isWildcard(routeParts))\r\n            pathArray.splice(0, routeParts.length - !!isWildcard(routeParts))\r\n            match\r\n\r\n        (routes = {}, modifiers = {}) -> (params = {}, path = '') ->\r\n            pathArray = pathToArray(path)\r\n            params = clone(params)\r\n\r\n            for route, callback of routes\r\n                newParams = params()\r\n                newPath = pathArray.concat()\r\n                if matchRoute(route, newPath, newParams, modifiers)\r\n                    callback(newParams, newPath.join('/'))\r\n    )()\r\n\r\n# AMD Support.\r\nif typeof this.define is 'function'\r\n    this.define('beagle', [], beagle)\r\nelse this.beagle = beagle\r\n"]}